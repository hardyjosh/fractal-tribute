/**
 * @TODO 
 * - What happens if the pool amount is not enough to cover the claim due to rounding errors?
 **/ 

/*op meta*/
/* @0xe4c000f3728f30e612b34e401529ce5266061cc1233dc54a6a89524929571d8f */
@0x37042217d6e1a50790fcea19503943302d7779a9b47d61dcadf07ffecc4c0812
#sentinel 0xfea74d0c9bf4a3c28f0dd0674db22a3d7f8bf259c56af19f4ac1e735b156974f
#sentinel1155 0xf3d9dabdb0009f2a4a1d315a6b607c74e619b5620e01f1130e4142970ffaf767

/* constants */
#game-master-address 0x74423442CEA6B5c90d13C2d7C21B0FcE723ECe6d
#payment-token 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270 /* polygon */
/* #payment-token 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889 - mumbai*/
#snapshot-price 0
#mint-price 2e16 /* 0.02 */
#snapshot-end-time 1699030800
#additional-mint-period 86400 /* time in seconds for how long minting should be active after the snapshot time ends */

#pool-amount 0x7dcc3e0b65d87abfb19508b671b26139dbe32871289b025ab4df45ad2f5481dd /* keccack256('pool-amount') */ 
#total-claimed-key 0xc6b7deb4e2f8b011c443c5ec0687465fc0468b096ad0fc5cb8e2f1a302a1a73b /* keccack256('total-claimed') */

#snapshot
you: context<0 0>(),
me: context<0 1>(),
content-hash: context<1 0 >(),
tokenid: hash(you content-hash),

/* ensure that the snapshot period is still active */
:ensure(lt(now() snapshot-end-time)),

/* ensure that the tokenid is not already minted */
:ensure(not(get(tokenid))),

/* if it isn't, we can mint it and set the key to true */
/* future mints will need to happen via the other flow */
:set(tokenid 1),

/* update the pool accounting */
prev-amount: get(pool-amount),
:set(pool-amount add(prev-amount snapshot-price)),

transfererc1155slist: sentinel,
transfererc721slist: sentinel,
/**
 * er20 transfers
 * token, from, to, amount
 */
transfererc20slist: sentinel,
_ _ _ _: payment-token you me snapshot-price,

burnslist: sentinel1155,

/**
 * mints of this erc1155 token
 */
mintslist: sentinel1155,
mint-account mint-id mint-amount: you tokenid 1;


#mint
you: context<0 0>(),
me: context<0 1>(),
tokenid: context<1 0 >(),
mint-amount: context<1 1>(),
recipient: context<1 2>(),

mint-end-time: add(snapshot-end-time additional-mint-period),

/* ensure that the mint period is still active */
:ensure(lt(now() mint-end-time)),

/* ensure that this tokenid has been minted at least once */
:ensure(get(tokenid)),

amount: mul(mint-amount mint-price),

/* update the pool accounting */
prev-amount: get(pool-amount),
:set(pool-amount add(prev-amount amount)),

transfererc1155slist: sentinel,
transfererc721slist: sentinel,
/**
 * er20 transfers
 * token, from, to, amount
 */
transfererc20slist: sentinel,
_ _ _ _: payment-token you me amount,

burnslist: sentinel1155,

/**
 * mints of this erc1155 token
 * to, id, amount
 */
mintslist: sentinel1155,
_ _ _: recipient tokenid mint-amount;


#claim
/**
 * for claiming, users will use a signed coupon by the game master,
 * each coupon can only be used once.
 * 
 * the coupon will be a signed message with the following fields:
 * [0] the address of the claimant
 * [1] amount
 * [2] the token address
 * [3] the address of this contract
 * 
 */
you: context<0 0>(),
me: context<0 1>(),

coupon-signer: context<2 0>(),
claimant: context<3 0>(),
percentage: context<3 1>(),
token: context<3 2>(),
contract: context<3 3>(),

/* ensure that the coupon has not been used before */
coupon-hash: context-column-hash<3>(),
:ensure(not(get(coupon-hash))),
:set(coupon-hash 1),

/* ensure that the mint period is over */
/* ensure that the coupon is signed by the game master */
/* ensure that the coupon is for the caller */
/* ensure that the token in the coupon is the payment token */
/* ensure that the coupon is for this contract */
:ensure(
    every(
        gt(now() add(additional-mint-period snapshot-end-time))
        eq(coupon-signer game-master-address)
        eq(claimant you)
        eq(token payment-token)
        eq(contract me)
    )
),

/* calculate the amount to be claimed */
pool-total: get(pool-amount),
total-claimed: get(total-claimed-key),

amount: min(decimal18-mul(percentage pool-total) sub(pool-total total-claimed)),
:set(total-claimed-key add(total-claimed amount)),

transfererc1155slist: sentinel,
transfererc721slist: sentinel,

/**
 * er20 transfers
 * token, from, to, amount
 */
transfererc20slist: sentinel,
_ _ _ _: payment-token me you amount,

burnslist: sentinel1155,
mintslist: sentinel1155;

